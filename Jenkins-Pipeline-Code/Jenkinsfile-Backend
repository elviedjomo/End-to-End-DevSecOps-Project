pipeline {
    agent any
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO2') // e.g., 'backend'
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/elviedjomo/End-to-End-DevSecOps-Project.git'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh """${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectName=three-tier-backend \
                            -Dsonar.projectKey=three-tier-backend"""
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                dir('Application-Code/backend') {
                    sh """
                        docker system prune -f
                        docker container prune -f
                        docker build -t ${AWS_ECR_REPO_NAME} .
                    """
                }
            }
        }

        stage('ECR Image Pushing') {
            steps {
                script {
                    def imageName = "${AWS_ECR_REPO_NAME}" // e.g., 'backend'
                    def ecrImageTag = "${REPOSITORY_URI}/${imageName}:${BUILD_NUMBER}"

                    sh """
                        echo "Logging into ECR..."
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}

                        echo "Tagging image: ${imageName} -> ${ecrImageTag}"
                        docker tag ${imageName} ${ecrImageTag}

                        echo "Pushing image to ECR..."
                        docker push ${ecrImageTag}
                    """
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    def ecrImageTag = "${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                    sh "trivy image ${ecrImageTag} > trivyimage.txt"
                }
            }
        }

        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "End-to-End-DevSecOps-Project"
                GIT_USER_NAME = "elviedjomo"
            }
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            git config user.email "elviedjomo@yahoo.com"
                            git config user.name "elviedjomo"

                            echo "Updating deployment.yaml with new image tag..."
                            imageTag=\$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml)
                            sed -i "s|${AWS_ECR_REPO_NAME}:\$imageTag|${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}|" deployment.yaml

                            git add deployment.yaml
                            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        """
                    }
                }
            }
        }
    }
}

